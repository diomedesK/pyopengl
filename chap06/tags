!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/reaper/pyopengl (personal)/proj/chap06/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
AMBIENT	light/Light.py	/^    AMBIENT = 1$/;"	v	class:Light
AmbientLight	light/AmbientLight.py	/^class AmbientLight(Light):$/;"	c
Attribute	core/Attribute.py	/^class Attribute(object):$/;"	c
AxesHelper	extras/AxesHelper.py	/^class AxesHelper(Mesh):$/;"	c
Base	core/Base.py	/^class Base(object):$/;"	c
BasicMaterial	materials/BasicMaterial.py	/^class BasicMaterial(Material):$/;"	c
BoxGeometry	geometries/BoxGeometry.py	/^class BoxGeometry(Geometry):$/;"	c
Camera	core/Camera.py	/^class Camera(Object3D):$/;"	c
ConeGeometry	geometries/ConeGeometry.py	/^class ConeGeometry(CylindricalGeometry):$/;"	c
CylinderGeometry	geometries/CylinderGeometry.py	/^class CylinderGeometry(CylindricalGeometry):$/;"	c
CylindricalGeometry	geometries/CylindricalGeomtry.py	/^class CylindricalGeometry(ParametricGeometry):$/;"	c
DIRECTIONAL	light/Light.py	/^    DIRECTIONAL = 2 $/;"	v	class:Light
DirectionalLight	light/DirectionalLight.py	/^class DirectionalLight(Light):$/;"	c
DirectionalLightHelper	extras/DirectionalLightHelper.py	/^class DirectionalLightHelper(GridHelper):$/;"	c
EllipsoidGeometry	geometries/EllipsoidGemetry.py	/^class EllipsoidGeometry(ParametricGeometry):$/;"	c
Executor	t-1-2.py	/^class Executor(Base):$/;"	c
Executor	t-1.py	/^class Executor(Base):$/;"	c
Executor	t1.py	/^class Executor(Base):$/;"	c
FlatMaterial	materials/FlatMaterial.py	/^class FlatMaterial(LightenedMaterial):$/;"	c
GL	materials/FlatMaterial.py	/^import OpenGL.GL as GL$/;"	I	nameref:module:OpenGL.GL
GL	materials/LambertMaterial.py	/^import OpenGL.GL as GL$/;"	I	nameref:module:OpenGL.GL
GL	materials/PhongMaterial.py	/^import OpenGL.GL as GL$/;"	I	nameref:module:OpenGL.GL
Geometry	core/Geometry.py	/^class Geometry(object):$/;"	c
Geometry	geometries/Geometry.py	/^class Geometry(object):$/;"	c
GridHelper	extras/GridHelper.py	/^class GridHelper(Mesh):$/;"	c
Input	core/Input.py	/^class Input(object):$/;"	c
LambertMaterial	materials/LambertMaterial.py	/^class LambertMaterial(LightenedMaterial):$/;"	c
Light	light/Light.py	/^class Light(Object3D):$/;"	c
LightenedMaterial	materials/LightenedMaterial.py	/^class LightenedMaterial(Material):$/;"	c
LineMaterial	materials/LineMaterial.py	/^class LineMaterial(BasicMaterial):$/;"	c
MOUSE_BUTTON_DOWN	core/Input.py	/^MOUSE_BUTTON_DOWN = "mouseButtonDown"$/;"	v
MOUSE_BUTTON_UP	core/Input.py	/^MOUSE_BUTTON_UP = "mouseButtonUp"$/;"	v
MOUSE_MOTION	core/Input.py	/^MOUSE_MOTION = "mouseMotion"$/;"	v
MOUSE_WHEEL	core/Input.py	/^MOUSE_WHEEL = "mouseWheel"$/;"	v
Material	core/Material.py	/^class Material(ABC):$/;"	c
Matrix	core/Matrix.py	/^class Matrix:$/;"	c
Mesh	core/Mesh.py	/^class Mesh(Object3D):$/;"	c
MovementRig	extras/MovementRig.py	/^class MovementRig(Object3D):$/;"	c
Object3D	core/Object3D.py	/^class Object3D(object):$/;"	c
OpenGLUtils	core/OpenGLUtils.py	/^class OpenGLUtils(object):$/;"	c
POINT	light/Light.py	/^    POINT = 3$/;"	v	class:Light
ParametricGeometry	geometries/ParametricGeometry.py	/^class ParametricGeometry(Geometry):$/;"	c
PhongMaterial	materials/PhongMaterial.py	/^class PhongMaterial(LightenedMaterial):$/;"	c
PlaneGeometry	geometries/PlaneGeometry.py	/^class PlaneGeometry(ParametricGeometry):$/;"	c
PointLight	light/PointLight.py	/^class PointLight(Light):$/;"	c
PointLightHelper	extras/PointLightHelper.py	/^class PointLightHelper(Mesh):$/;"	c
PolygonGeometry	geometries/PolygonGeometry.py	/^class PolygonGeometry(Geometry):$/;"	c
PostProcessor	core/PostProcessor.py	/^class PostProcessor(object):$/;"	c
PrismGeometry	geometries/PrismGeometry.py	/^class PrismGeometry(CylindricalGeometry):$/;"	c
PyramidGeometry	geometries/PyramidGeometry.py	/^class PyramidGeometry(CylindricalGeometry):$/;"	c
RectangleGeometry	geometries/RectangleGeometry.py	/^class RectangleGeometry(Geometry):$/;"	c
RenderTarget	core/RendererTarget.py	/^class RenderTarget(object):$/;"	c
Renderer	core/Renderer.py	/^class Renderer(object):$/;"	c
S	geometries/CylindricalGeomtry.py	/^        def S(u, v):$/;"	f	member:CylindricalGeometry.__init__	file:
S	geometries/EllipsoidGemetry.py	/^        def S(u, v):$/;"	f	member:EllipsoidGeometry.__init__	file:
S	geometries/PlaneGeometry.py	/^        def S(u, v):$/;"	f	member:PlaneGeometry.__init__	file:
Scene	core/Scene.py	/^class Scene(Object3D):$/;"	c
SphereGeometry	geometries/SphereGeometry.py	/^class SphereGeometry(EllipsoidGeometry):$/;"	c
SpriteMaterial	materials/SpriteMaterial.py	/^class SpriteMaterial(Material):$/;"	c
SurfaceMaterial	materials/SurfaceMaterial.py	/^class SurfaceMaterial(BasicMaterial):$/;"	c
TemplateEffect	effects/TemplateEffect.py	/^class TemplateEffect(Material):$/;"	c
TextTexture	extras/TextTexture.py	/^class TextTexture(Texture):$/;"	c
Texture	core/Texture.py	/^class Texture(object):$/;"	c
TextureMaterial	materials/TextureMaterial.py	/^class TextureMaterial(Material):$/;"	c
TintEffect	effects/TintEffect.py	/^class TintEffect(Material):$/;"	c
Uniform	core/Uniform.py	/^class Uniform(object):$/;"	c
__CheckIfShouldPrintCode	core/Material.py	/^    def __CheckIfShouldPrintCode():$/;"	m	class:Material	file:
__compileShader	core/OpenGLUtils.py	/^    def __compileShader(code, kind, printCode = False):$/;"	m	class:OpenGLUtils	file:
__init__	core/Attribute.py	/^    def __init__(self, dataType, data):$/;"	m	class:Attribute
__init__	core/Base.py	/^    def __init__(self, screenSize=[512, 512], frameRate = 60, lockMouse = False):$/;"	m	class:Base
__init__	core/Camera.py	/^    def __init__(self, angleOfView=60, aspectRatio=1.0, near=0.1, far=1000):$/;"	m	class:Camera
__init__	core/Geometry.py	/^    def __init__(self):$/;"	m	class:Geometry
__init__	core/Input.py	/^    def __init__(self, controller):$/;"	m	class:Input
__init__	core/Material.py	/^    def __init__(self, vertexShaderCode, fragmentShaderCode):$/;"	m	class:Material
__init__	core/Mesh.py	/^    def __init__(self, geometry, material):$/;"	m	class:Mesh
__init__	core/Object3D.py	/^    def __init__(self):$/;"	m	class:Object3D
__init__	core/PostProcessor.py	/^    def __init__(self, renderer, scene, camera, finalRenderTarget=None):$/;"	m	class:PostProcessor
__init__	core/Renderer.py	/^    def __init__(self, clearColor = [0, 0, 0, 1]):$/;"	m	class:Renderer
__init__	core/RendererTarget.py	/^    def __init__(self, resolution = [512, 512], texture = None, properties = {} ):$/;"	m	class:RenderTarget
__init__	core/Scene.py	/^    def __init__(self):$/;"	m	class:Scene
__init__	core/Texture.py	/^    def __init__(self, imagePath=None, properties={}):$/;"	m	class:Texture
__init__	core/Uniform.py	/^    def __init__(self, program, variableName):$/;"	m	class:Uniform
__init__	effects/TemplateEffect.py	/^    def __init__(self):$/;"	m	class:TemplateEffect
__init__	effects/TintEffect.py	/^    def __init__(self, tintColor = [1.0, 0.0, 0.0]):$/;"	m	class:TintEffect
__init__	extras/AxesHelper.py	/^    def __init__(self, axisLength = 2, lineWidth = 2, axisColors = [ [1, 0, 0], [ 0, 1, 0 ], [0,/;"	m	class:AxesHelper
__init__	extras/DirectionalLightHelper.py	/^    def __init__(self, directionalLight):$/;"	m	class:DirectionalLightHelper
__init__	extras/GridHelper.py	/^    def __init__(self, divisions = 10, size = 10, color = [1, 1, 1], lineWidth = 1):$/;"	m	class:GridHelper
__init__	extras/MovementRig.py	/^    def __init__(self, drag = 1.0, userDefinedControls = {}):$/;"	m	class:MovementRig
__init__	extras/PointLightHelper.py	/^    def __init__(self, pointLight, size=0.22, lineWidth=1):$/;"	m	class:PointLightHelper
__init__	extras/TextTexture.py	/^    def __init__(self, text="Hello, world!", systemFontName="Arial", fontFileName=None, fontSize/;"	m	class:TextTexture
__init__	geometries/BoxGeometry.py	/^    def __init__(self, width=1, height=1, depth=1):$/;"	m	class:BoxGeometry
__init__	geometries/ConeGeometry.py	/^    def __init__(self, radius=1, height=1, radialSegments=32, heightSegments=4, closed=True):$/;"	m	class:ConeGeometry
__init__	geometries/CylinderGeometry.py	/^    def __init__(self, radius=1, height=1, radialSegments=32, heightSegments=4, closed=True):$/;"	m	class:CylinderGeometry
__init__	geometries/CylindricalGeomtry.py	/^    def __init__(self, radiusTop=1, radiusBottom=1, $/;"	m	class:CylindricalGeometry
__init__	geometries/EllipsoidGemetry.py	/^    def __init__(self, width=1, height=1, depth=1,$/;"	m	class:EllipsoidGeometry
__init__	geometries/Geometry.py	/^    def __init__(self):$/;"	m	class:Geometry
__init__	geometries/ParametricGeometry.py	/^    def __init__(self, $/;"	m	class:ParametricGeometry
__init__	geometries/PlaneGeometry.py	/^    def __init__(self, width=1, height=1, widthSegments=8, heightSegments=8):$/;"	m	class:PlaneGeometry
__init__	geometries/PolygonGeometry.py	/^    def __init__(self, sides=3, radius=1):$/;"	m	class:PolygonGeometry
__init__	geometries/PrismGeometry.py	/^    def __init__(self, radius=1, height=1, sides=6, heightSegments=4, closed=True):$/;"	m	class:PrismGeometry
__init__	geometries/PyramidGeometry.py	/^    def __init__(self, radius=1, height=1, sides=4, heightSegments=4, closed=True):$/;"	m	class:PyramidGeometry
__init__	geometries/RectangleGeometry.py	/^    def __init__(self, width=1, height=1, position=[0, 0], alignment=[0.5, 0.5]):$/;"	m	class:RectangleGeometry
__init__	geometries/SphereGeometry.py	/^    def __init__(self, radius: Union[int, float], radiusSegments=32, heightSements=16):$/;"	m	class:SphereGeometry
__init__	light/AmbientLight.py	/^    def __init__(self, color = [1, 1, 1]):$/;"	m	class:AmbientLight
__init__	light/DirectionalLight.py	/^    def __init__(self, color=(1, 1, 1), direction=(0, -1, 0)):$/;"	m	class:DirectionalLight
__init__	light/Light.py	/^    def __init__(self, lightType = 0):$/;"	m	class:Light
__init__	light/PointLight.py	/^    def __init__(self,$/;"	m	class:PointLight
__init__	materials/BasicMaterial.py	/^    def __init__(self):$/;"	m	class:BasicMaterial
__init__	materials/FlatMaterial.py	/^    def __init__(self, texture = None, properties = {}, numberOfLights = 1):$/;"	m	class:FlatMaterial
__init__	materials/LambertMaterial.py	/^    def __init__(self, texture = None, properties = {}, numberOfLights = 1):$/;"	m	class:LambertMaterial
__init__	materials/LightenedMaterial.py	/^    def __init__(self, numberOfLights = 4):$/;"	m	class:LightenedMaterial
__init__	materials/LineMaterial.py	/^    def __init__(self, properties={}):$/;"	m	class:LineMaterial
__init__	materials/PhongMaterial.py	/^    def __init__(self, texture = None, properties = {}, numberOfLights = 1):$/;"	m	class:PhongMaterial
__init__	materials/SpriteMaterial.py	/^    def __init__(self, texture, properties={}):$/;"	m	class:SpriteMaterial
__init__	materials/SurfaceMaterial.py	/^    def __init__(self, properties={}):$/;"	m	class:SurfaceMaterial
__init__	materials/TextureMaterial.py	/^    def __init__(self, texture, properties={}):$/;"	m	class:TextureMaterial
__init__	t-1-2.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Executor
__init__	t-1.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Executor
__init__	t1.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Executor
add	core/Object3D.py	/^    def add(self, child):$/;"	m	class:Object3D
add	extras/MovementRig.py	/^    def add(self, child):$/;"	m	class:MovementRig
addAttribute	core/Geometry.py	/^    def addAttribute(self, dataType, name, data):$/;"	m	class:Geometry
addAttribute	geometries/Geometry.py	/^    def addAttribute(self, dataType, variableName, data):$/;"	m	class:Geometry
addEffect	core/PostProcessor.py	/^    def addEffect(self, effect):$/;"	m	class:PostProcessor
addUniform	core/Material.py	/^    def addUniform(self, dataType, name, data):$/;"	m	class:Material
applyMatrix	core/Object3D.py	/^    def applyMatrix(self, matrix, useLocalCoordinates = True):$/;"	m	class:Object3D
applyMatrix	geometries/Geometry.py	/^    def applyMatrix(self, matrix, variableName = "vertexPosition"):$/;"	m	class:Geometry
associateVariable	core/Attribute.py	/^    def associateVariable(self, program, variableName):$/;"	m	class:Attribute
calculateNormal	geometries/ParametricGeometry.py	/^        def calculateNormal(p0, p1, p2):$/;"	f	member:ParametricGeometry.__init__	file:
countVertices	core/Geometry.py	/^    def countVertices(self):$/;"	m	class:Geometry
countVertices	geometries/Geometry.py	/^    def countVertices(self):$/;"	m	class:Geometry
debug	core/Renderer.py	/^debug = True$/;"	v
fragmentShaderCode	materials/FlatMaterial.py	/^    def fragmentShaderCode(self):$/;"	m	class:FlatMaterial
fragmentShaderCode	materials/LambertMaterial.py	/^    def fragmentShaderCode(self):$/;"	m	class:LambertMaterial
fragmentShaderCode	materials/LightenedMaterial.py	/^    def fragmentShaderCode(self):$/;"	m	class:LightenedMaterial
fragmentShaderCode	materials/PhongMaterial.py	/^    def fragmentShaderCode(self):$/;"	m	class:PhongMaterial
fromData	core/Uniform.py	/^    def fromData(cls, dataType, data):$/;"	m	class:Uniform
generateGLSLLightCalculations	materials/LightenedMaterial.py	/^    def generateGLSLLightCalculations(self, destName = "light"):$/;"	m	class:LightenedMaterial
generateGLSLLightUniforms	materials/LightenedMaterial.py	/^    def generateGLSLLightUniforms(self):$/;"	m	class:LightenedMaterial
getDescendantsList	core/Object3D.py	/^    def getDescendantsList(self):$/;"	m	class:Object3D
getDirection	core/Object3D.py	/^    def getDirection(self):$/;"	m	class:Object3D
getPosition	core/Object3D.py	/^    def getPosition(self):$/;"	m	class:Object3D
getRotationMatrix	core/Object3D.py	/^    def getRotationMatrix(self):$/;"	m	class:Object3D
getWorldPosition	core/Object3D.py	/^    def getWorldPosition(self):$/;"	m	class:Object3D
getWorldTransform	core/Object3D.py	/^    def getWorldTransform(self): #not equal to a "getGlobalTransform"$/;"	m	class:Object3D
initialize	core/Base.py	/^    def initialize(self):$/;"	m	class:Base
initialize	t-1-2.py	/^    def initialize(self):$/;"	m	class:Executor
initialize	t-1.py	/^    def initialize(self):$/;"	m	class:Executor
initialize	t1.py	/^    def initialize(self):$/;"	m	class:Executor
initializeProgram	core/OpenGLUtils.py	/^    def initializeProgram(vertexShaderCode, fragmentShaderCode, printCode = False):$/;"	m	class:OpenGLUtils
isKeyDown	core/Input.py	/^    def isKeyDown(self, key_name):$/;"	m	class:Input
isKeyPressed	core/Input.py	/^    def isKeyPressed(self, key_name):$/;"	m	class:Input
isKeyUp	core/Input.py	/^    def isKeyUp(self, key_name):$/;"	m	class:Input
loadImage	core/Texture.py	/^    def loadImage(self, path):$/;"	m	class:Texture
locateUniform	core/Uniform.py	/^    def locateUniform(self, program, variableName):$/;"	m	class:Uniform
locateUniforms	core/Material.py	/^    def locateUniforms(self):$/;"	m	class:Material
lookAt	core/Object3D.py	/^    def lookAt(self, targetPosition):$/;"	m	class:Object3D
makeIdentity	core/Matrix.py	/^    def makeIdentity():$/;"	m	class:Matrix
makeLookAt	core/Matrix.py	/^    def makeLookAt( objectPosition, targetPosition ):$/;"	m	class:Matrix
makeOrthographic	core/Matrix.py	/^    def makeOrthographic(left=-1, right=1, bottom=-1, top=1, near=-1, far=1):$/;"	m	class:Matrix
makePerspective	core/Matrix.py	/^    def makePerspective(angleOfView=60, aspectRatio=1.0, near=0.1, far=1000.0):$/;"	m	class:Matrix
makeRotationX	core/Matrix.py	/^    def makeRotationX(angle):$/;"	m	class:Matrix
makeRotationY	core/Matrix.py	/^    def makeRotationY(angle):$/;"	m	class:Matrix
makeRotationZ	core/Matrix.py	/^    def makeRotationZ(angle):$/;"	m	class:Matrix
makeScale	core/Matrix.py	/^    def makeScale(size):$/;"	m	class:Matrix
makeTranslation	core/Matrix.py	/^    def makeTranslation(x, y, z):$/;"	m	class:Matrix
merge	geometries/Geometry.py	/^    def merge(self, otherGeometry):$/;"	m	class:Geometry
printSystemInfo	core/OpenGLUtils.py	/^    def printSystemInfo():$/;"	m	class:OpenGLUtils
quickUpload	core/Uniform.py	/^    def quickUpload(cls, program, variableName, dataType, data):$/;"	m	class:Uniform
remove	core/Object3D.py	/^    def remove(self, child):$/;"	m	class:Object3D
remove	extras/MovementRig.py	/^    def remove(self, child):$/;"	m	class:MovementRig
render	core/PostProcessor.py	/^    def render(self):$/;"	m	class:PostProcessor
render	core/Renderer.py	/^    def render(self, scene, camera, meshHandler = None, clearColor = True, clearDepth = True, re/;"	m	class:Renderer
rotateX	core/Object3D.py	/^    def rotateX(self, angle, useLocalCoordinates = True):$/;"	m	class:Object3D
rotateY	core/Object3D.py	/^    def rotateY(self, angle, useLocalCoordinates = True):$/;"	m	class:Object3D
rotateZ	core/Object3D.py	/^    def rotateZ(self, angle, useLocalCoordinates = True):$/;"	m	class:Object3D
run	core/Base.py	/^    def run(self):$/;"	m	class:Base
scale	core/Object3D.py	/^    def scale(self, size, useLocalCoordinates = True):$/;"	m	class:Object3D
setData	core/Uniform.py	/^    def setData(self, dataType, data):$/;"	m	class:Uniform
setDirection	core/Object3D.py	/^    def setDirection(self, direction):$/;"	m	class:Object3D
setLookPositionRelativeTo	extras/MovementRig.py	/^    def setLookPositionRelativeTo(self, obj : Object3D):$/;"	m	class:MovementRig
setOrthographic	core/Camera.py	/^    def setOrthographic(self, left = -1, right = 1, bottom = -1, top = 1, near = -1, far = 1):$/;"	m	class:Camera
setPerspective	core/Camera.py	/^    def setPerspective(self, angleOfView=60, aspectRatio=1.0, near=0.1, far=1000):$/;"	m	class:Camera
setPosition	core/Object3D.py	/^    def setPosition(self, position):$/;"	m	class:Object3D
setProperties	core/Material.py	/^    def setProperties(self, properties):$/;"	m	class:Material
setProperties	core/Texture.py	/^    def setProperties(self, properties):$/;"	m	class:Texture
shouldPrintCode	core/Material.py	/^    def shouldPrintCode(self):$/;"	m	class:Material
translate	core/Object3D.py	/^    def translate(self, x, y, z, useLocalCoordinates = True):$/;"	m	class:Object3D
update	core/Base.py	/^    def update(self):$/;"	m	class:Base
update	core/Input.py	/^    def update(self):$/;"	m	class:Input
update	extras/MovementRig.py	/^    def update(self, inputObject, moveAmount, ignoreMouseEvents = False, ignoreKeyboardEvents = /;"	m	class:MovementRig
update	t-1-2.py	/^    def update(self):$/;"	m	class:Executor
update	t-1.py	/^    def update(self):$/;"	m	class:Executor
update	t1.py	/^    def update(self):$/;"	m	class:Executor
updateRenderSettings	core/Material.py	/^    def updateRenderSettings(self):$/;"	m	class:Material
updateRenderSettings	materials/BasicMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:BasicMaterial
updateRenderSettings	materials/FlatMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:FlatMaterial
updateRenderSettings	materials/LambertMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:LambertMaterial
updateRenderSettings	materials/LineMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:LineMaterial
updateRenderSettings	materials/PhongMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:PhongMaterial
updateRenderSettings	materials/SpriteMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:SpriteMaterial
updateRenderSettings	materials/SurfaceMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:SurfaceMaterial
updateRenderSettings	materials/TextureMaterial.py	/^    def updateRenderSettings(self):$/;"	m	class:TextureMaterial
updateViewMatrix	core/Camera.py	/^    def updateViewMatrix(self):$/;"	m	class:Camera
uploadData	core/Attribute.py	/^    def uploadData(self):$/;"	m	class:Attribute
uploadData	core/Texture.py	/^    def uploadData(self):$/;"	m	class:Texture
uploadData	core/Uniform.py	/^    def uploadData(self):$/;"	m	class:Uniform
vertexShaderCode	materials/FlatMaterial.py	/^    def vertexShaderCode(self):$/;"	m	class:FlatMaterial
vertexShaderCode	materials/LambertMaterial.py	/^    def vertexShaderCode(self):$/;"	m	class:LambertMaterial
vertexShaderCode	materials/LightenedMaterial.py	/^    def vertexShaderCode(self):$/;"	m	class:LightenedMaterial
vertexShaderCode	materials/PhongMaterial.py	/^    def vertexShaderCode(self):$/;"	m	class:PhongMaterial
